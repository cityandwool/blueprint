/* ==========================================================================
   MIXINS
   ========================================================================== */

@mixin visuallyhidden {
    position: absolute; 
  	overflow: hidden; 
  	clip: rect(0 0 0 0); 
  	height: 0px; width: 0px; 
  	margin: -1px; padding: 0; border: 0;
}

@mixin norm {
    margin: 0;
    padding: 0;
    li {
        list-style: none;
    }
}

@mixin calc($property, $expression) { 
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression}); 
}

%clearfix {
    zoom:1;
    &:before, &:after {
        content: "\0020";
        display: block;
        height: 0;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }
}

%makeCard {
    padding: 0 $gutter $gutter $gutter;
    margin-bottom: $gutter;
    border-top-style: solid;
    border-top-width: $border;
}

%fa {
    font-family: FontAwesome;
}

@mixin viewIcon($icontype) {
    position: relative;
    &:after {
        @extend %fa;
        @if $icontype == faq { 
            content: "\f128";
        }
        @else if $icontype == lock {
            content: "\f023";
        }
        @else if $icontype == info { 
            content: "\f05a";
        }
        position: absolute;
        top: $gutter + $border;
        right: $gutter;
        color: $gray-dark;
    }
}

@mixin addIcon($iconType) {
    padding-left: $gutter*2.5 !important;
    position: relative;
    &:before {
        @extend %fa;
        position: absolute;
        left: $gutter;
        @if $iconType == desktop {
            content: "\f108";
        }
        @else if $iconType == email {
            content: "\f003";
        }
   }
}

%arrowDown {
    $s: $gutter/2;
    position: absolute;
    content: "";
    width: 0; 
    height: 0; 
    border-left: $s solid transparent;
    border-right: $s solid transparent;
    border-top: $s solid $primary;
}

$default-prefixes: webkit moz ms o;

@mixin vendorize($property, $value, $prefixes: $default-prefixes) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
       }
      }
     }
        
   @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
 }
 @if $fadeout == false{
   @if $skew == true and ( $type == box ){
     @for $i from 0 to $length - 1 {
            $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
   }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
 }
 $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}